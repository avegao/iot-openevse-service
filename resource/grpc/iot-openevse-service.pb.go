// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot-openevse-service.proto

/*
Package iot_openevse_service is a generated protocol buffer package.

It is generated from these files:
	iot-openevse-service.proto

It has these top-level messages:
	GetRequest
	GetAmmeterSettingsResponse
	GetAuthLockStateResponse
	GetChargeLimitResponse
	GetCurrentCapacityRangeInAmpsResponse
	GetDelayTimerResponse
	GetEnergyUsageResponse
	GetEvConnectStateResponse
	GetFaultCountersResponse
	GetOverTemperatureThresholdsResponse
	GetRtcTimeResponse
	GetSettingsResponse
	GetTimeLimitResponse
	GetVersionResponse
	GetVoltmeterSettingsResponse
	SetResponse
	SetRtcTimeRequest
	Charger
	FindAllChargersResponse
*/
package iot_openevse_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetEvConnectStateResponse_EvConnectState int32

const (
	GetEvConnectStateResponse_NOT_CONNECTED GetEvConnectStateResponse_EvConnectState = 0
	GetEvConnectStateResponse_CONNECTED     GetEvConnectStateResponse_EvConnectState = 1
	GetEvConnectStateResponse_UNKNOWN       GetEvConnectStateResponse_EvConnectState = 2
)

var GetEvConnectStateResponse_EvConnectState_name = map[int32]string{
	0: "NOT_CONNECTED",
	1: "CONNECTED",
	2: "UNKNOWN",
}
var GetEvConnectStateResponse_EvConnectState_value = map[string]int32{
	"NOT_CONNECTED": 0,
	"CONNECTED":     1,
	"UNKNOWN":       2,
}

func (x GetEvConnectStateResponse_EvConnectState) String() string {
	return proto.EnumName(GetEvConnectStateResponse_EvConnectState_name, int32(x))
}
func (GetEvConnectStateResponse_EvConnectState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

type GetRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAmmeterSettingsResponse struct {
	CurrentScaleFactor int32 `protobuf:"varint,1,opt,name=currentScaleFactor" json:"currentScaleFactor,omitempty"`
	CurrentOffset      int32 `protobuf:"varint,2,opt,name=currentOffset" json:"currentOffset,omitempty"`
}

func (m *GetAmmeterSettingsResponse) Reset()                    { *m = GetAmmeterSettingsResponse{} }
func (m *GetAmmeterSettingsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAmmeterSettingsResponse) ProtoMessage()               {}
func (*GetAmmeterSettingsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetAmmeterSettingsResponse) GetCurrentScaleFactor() int32 {
	if m != nil {
		return m.CurrentScaleFactor
	}
	return 0
}

func (m *GetAmmeterSettingsResponse) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return 0
}

type GetAuthLockStateResponse struct {
	Locked bool `protobuf:"varint,1,opt,name=locked" json:"locked,omitempty"`
}

func (m *GetAuthLockStateResponse) Reset()                    { *m = GetAuthLockStateResponse{} }
func (m *GetAuthLockStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAuthLockStateResponse) ProtoMessage()               {}
func (*GetAuthLockStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetAuthLockStateResponse) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type GetChargeLimitResponse struct {
	Kwh int32 `protobuf:"varint,1,opt,name=kwh" json:"kwh,omitempty"`
}

func (m *GetChargeLimitResponse) Reset()                    { *m = GetChargeLimitResponse{} }
func (m *GetChargeLimitResponse) String() string            { return proto.CompactTextString(m) }
func (*GetChargeLimitResponse) ProtoMessage()               {}
func (*GetChargeLimitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetChargeLimitResponse) GetKwh() int32 {
	if m != nil {
		return m.Kwh
	}
	return 0
}

type GetCurrentCapacityRangeInAmpsResponse struct {
	MinAmps int32 `protobuf:"varint,1,opt,name=minAmps" json:"minAmps,omitempty"`
	MaxAmps int32 `protobuf:"varint,2,opt,name=maxAmps" json:"maxAmps,omitempty"`
}

func (m *GetCurrentCapacityRangeInAmpsResponse) Reset()         { *m = GetCurrentCapacityRangeInAmpsResponse{} }
func (m *GetCurrentCapacityRangeInAmpsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentCapacityRangeInAmpsResponse) ProtoMessage()    {}
func (*GetCurrentCapacityRangeInAmpsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *GetCurrentCapacityRangeInAmpsResponse) GetMinAmps() int32 {
	if m != nil {
		return m.MinAmps
	}
	return 0
}

func (m *GetCurrentCapacityRangeInAmpsResponse) GetMaxAmps() int32 {
	if m != nil {
		return m.MaxAmps
	}
	return 0
}

type GetDelayTimerResponse struct {
	StartTime string `protobuf:"bytes,1,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *GetDelayTimerResponse) Reset()                    { *m = GetDelayTimerResponse{} }
func (m *GetDelayTimerResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDelayTimerResponse) ProtoMessage()               {}
func (*GetDelayTimerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetDelayTimerResponse) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetDelayTimerResponse) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type GetEnergyUsageResponse struct {
	WhInSession    float32 `protobuf:"fixed32,1,opt,name=whInSession" json:"whInSession,omitempty"`
	KwhAccumulated float32 `protobuf:"fixed32,2,opt,name=kwhAccumulated" json:"kwhAccumulated,omitempty"`
}

func (m *GetEnergyUsageResponse) Reset()                    { *m = GetEnergyUsageResponse{} }
func (m *GetEnergyUsageResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEnergyUsageResponse) ProtoMessage()               {}
func (*GetEnergyUsageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetEnergyUsageResponse) GetWhInSession() float32 {
	if m != nil {
		return m.WhInSession
	}
	return 0
}

func (m *GetEnergyUsageResponse) GetKwhAccumulated() float32 {
	if m != nil {
		return m.KwhAccumulated
	}
	return 0
}

type GetEvConnectStateResponse struct {
	State GetEvConnectStateResponse_EvConnectState `protobuf:"varint,1,opt,name=state,enum=iot_openevse_service.GetEvConnectStateResponse_EvConnectState" json:"state,omitempty"`
}

func (m *GetEvConnectStateResponse) Reset()                    { *m = GetEvConnectStateResponse{} }
func (m *GetEvConnectStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEvConnectStateResponse) ProtoMessage()               {}
func (*GetEvConnectStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetEvConnectStateResponse) GetState() GetEvConnectStateResponse_EvConnectState {
	if m != nil {
		return m.State
	}
	return GetEvConnectStateResponse_NOT_CONNECTED
}

type GetFaultCountersResponse struct {
	Gfdi       int32 `protobuf:"varint,1,opt,name=gfdi" json:"gfdi,omitempty"`
	NoGround   int32 `protobuf:"varint,2,opt,name=noGround" json:"noGround,omitempty"`
	StuckRelay int32 `protobuf:"varint,3,opt,name=stuckRelay" json:"stuckRelay,omitempty"`
}

func (m *GetFaultCountersResponse) Reset()                    { *m = GetFaultCountersResponse{} }
func (m *GetFaultCountersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetFaultCountersResponse) ProtoMessage()               {}
func (*GetFaultCountersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetFaultCountersResponse) GetGfdi() int32 {
	if m != nil {
		return m.Gfdi
	}
	return 0
}

func (m *GetFaultCountersResponse) GetNoGround() int32 {
	if m != nil {
		return m.NoGround
	}
	return 0
}

func (m *GetFaultCountersResponse) GetStuckRelay() int32 {
	if m != nil {
		return m.StuckRelay
	}
	return 0
}

type GetOverTemperatureThresholdsResponse struct {
	Ambient float32 `protobuf:"fixed32,1,opt,name=ambient" json:"ambient,omitempty"`
	Ir      float32 `protobuf:"fixed32,2,opt,name=ir" json:"ir,omitempty"`
}

func (m *GetOverTemperatureThresholdsResponse) Reset()         { *m = GetOverTemperatureThresholdsResponse{} }
func (m *GetOverTemperatureThresholdsResponse) String() string { return proto.CompactTextString(m) }
func (*GetOverTemperatureThresholdsResponse) ProtoMessage()    {}
func (*GetOverTemperatureThresholdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9}
}

func (m *GetOverTemperatureThresholdsResponse) GetAmbient() float32 {
	if m != nil {
		return m.Ambient
	}
	return 0
}

func (m *GetOverTemperatureThresholdsResponse) GetIr() float32 {
	if m != nil {
		return m.Ir
	}
	return 0
}

type GetRtcTimeResponse struct {
	RtcTime string `protobuf:"bytes,1,opt,name=rtcTime" json:"rtcTime,omitempty"`
}

func (m *GetRtcTimeResponse) Reset()                    { *m = GetRtcTimeResponse{} }
func (m *GetRtcTimeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRtcTimeResponse) ProtoMessage()               {}
func (*GetRtcTimeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetRtcTimeResponse) GetRtcTime() string {
	if m != nil {
		return m.RtcTime
	}
	return ""
}

type GetSettingsResponse struct {
	Amperes int32    `protobuf:"varint,1,opt,name=amperes" json:"amperes,omitempty"`
	Flags   []string `protobuf:"bytes,2,rep,name=flags" json:"flags,omitempty"`
}

func (m *GetSettingsResponse) Reset()                    { *m = GetSettingsResponse{} }
func (m *GetSettingsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSettingsResponse) ProtoMessage()               {}
func (*GetSettingsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetSettingsResponse) GetAmperes() int32 {
	if m != nil {
		return m.Amperes
	}
	return 0
}

func (m *GetSettingsResponse) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

type GetTimeLimitResponse struct {
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetTimeLimitResponse) Reset()                    { *m = GetTimeLimitResponse{} }
func (m *GetTimeLimitResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTimeLimitResponse) ProtoMessage()               {}
func (*GetTimeLimitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetTimeLimitResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetVersionResponse struct {
	FirmwareVersion string `protobuf:"bytes,1,opt,name=firmwareVersion" json:"firmwareVersion,omitempty"`
	ProtocolVersion string `protobuf:"bytes,2,opt,name=protocolVersion" json:"protocolVersion,omitempty"`
}

func (m *GetVersionResponse) Reset()                    { *m = GetVersionResponse{} }
func (m *GetVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVersionResponse) ProtoMessage()               {}
func (*GetVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetVersionResponse) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

func (m *GetVersionResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

type GetVoltmeterSettingsResponse struct {
	Calefactor int32 `protobuf:"varint,1,opt,name=calefactor" json:"calefactor,omitempty"`
	Offset     int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *GetVoltmeterSettingsResponse) Reset()                    { *m = GetVoltmeterSettingsResponse{} }
func (m *GetVoltmeterSettingsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVoltmeterSettingsResponse) ProtoMessage()               {}
func (*GetVoltmeterSettingsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetVoltmeterSettingsResponse) GetCalefactor() int32 {
	if m != nil {
		return m.Calefactor
	}
	return 0
}

func (m *GetVoltmeterSettingsResponse) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SetResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SetResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SetRtcTimeRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RtcTime string `protobuf:"bytes,2,opt,name=rtcTime" json:"rtcTime,omitempty"`
}

func (m *SetRtcTimeRequest) Reset()                    { *m = SetRtcTimeRequest{} }
func (m *SetRtcTimeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRtcTimeRequest) ProtoMessage()               {}
func (*SetRtcTimeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SetRtcTimeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SetRtcTimeRequest) GetRtcTime() string {
	if m != nil {
		return m.RtcTime
	}
	return ""
}

type Charger struct {
	Id        uint64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Host      string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	CreatedAt string `protobuf:"bytes,4,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,5,opt,name=updatedAt" json:"updatedAt,omitempty"`
	DeletedAt string `protobuf:"bytes,6,opt,name=deletedAt" json:"deletedAt,omitempty"`
}

func (m *Charger) Reset()                    { *m = Charger{} }
func (m *Charger) String() string            { return proto.CompactTextString(m) }
func (*Charger) ProtoMessage()               {}
func (*Charger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Charger) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Charger) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Charger) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Charger) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Charger) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Charger) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type FindAllChargersResponse struct {
	Chargers []*Charger `protobuf:"bytes,1,rep,name=chargers" json:"chargers,omitempty"`
}

func (m *FindAllChargersResponse) Reset()                    { *m = FindAllChargersResponse{} }
func (m *FindAllChargersResponse) String() string            { return proto.CompactTextString(m) }
func (*FindAllChargersResponse) ProtoMessage()               {}
func (*FindAllChargersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FindAllChargersResponse) GetChargers() []*Charger {
	if m != nil {
		return m.Chargers
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "iot_openevse_service.GetRequest")
	proto.RegisterType((*GetAmmeterSettingsResponse)(nil), "iot_openevse_service.GetAmmeterSettingsResponse")
	proto.RegisterType((*GetAuthLockStateResponse)(nil), "iot_openevse_service.GetAuthLockStateResponse")
	proto.RegisterType((*GetChargeLimitResponse)(nil), "iot_openevse_service.GetChargeLimitResponse")
	proto.RegisterType((*GetCurrentCapacityRangeInAmpsResponse)(nil), "iot_openevse_service.GetCurrentCapacityRangeInAmpsResponse")
	proto.RegisterType((*GetDelayTimerResponse)(nil), "iot_openevse_service.GetDelayTimerResponse")
	proto.RegisterType((*GetEnergyUsageResponse)(nil), "iot_openevse_service.GetEnergyUsageResponse")
	proto.RegisterType((*GetEvConnectStateResponse)(nil), "iot_openevse_service.GetEvConnectStateResponse")
	proto.RegisterType((*GetFaultCountersResponse)(nil), "iot_openevse_service.GetFaultCountersResponse")
	proto.RegisterType((*GetOverTemperatureThresholdsResponse)(nil), "iot_openevse_service.GetOverTemperatureThresholdsResponse")
	proto.RegisterType((*GetRtcTimeResponse)(nil), "iot_openevse_service.GetRtcTimeResponse")
	proto.RegisterType((*GetSettingsResponse)(nil), "iot_openevse_service.GetSettingsResponse")
	proto.RegisterType((*GetTimeLimitResponse)(nil), "iot_openevse_service.GetTimeLimitResponse")
	proto.RegisterType((*GetVersionResponse)(nil), "iot_openevse_service.GetVersionResponse")
	proto.RegisterType((*GetVoltmeterSettingsResponse)(nil), "iot_openevse_service.GetVoltmeterSettingsResponse")
	proto.RegisterType((*SetResponse)(nil), "iot_openevse_service.SetResponse")
	proto.RegisterType((*SetRtcTimeRequest)(nil), "iot_openevse_service.SetRtcTimeRequest")
	proto.RegisterType((*Charger)(nil), "iot_openevse_service.Charger")
	proto.RegisterType((*FindAllChargersResponse)(nil), "iot_openevse_service.FindAllChargersResponse")
	proto.RegisterEnum("iot_openevse_service.GetEvConnectStateResponse_EvConnectState", GetEvConnectStateResponse_EvConnectState_name, GetEvConnectStateResponse_EvConnectState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Openevse service

type OpenevseClient interface {
	FindChargerById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Charger, error)
	FindAllChargers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FindAllChargersResponse, error)
	GetAmmeterSettings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAmmeterSettingsResponse, error)
	GetAuthLockState(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAuthLockStateResponse, error)
	GetChargeLimit(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetChargeLimitResponse, error)
	GetCurrentCapacityRangeInAmps(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCurrentCapacityRangeInAmpsResponse, error)
	GetDelayTimer(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetDelayTimerResponse, error)
	GetEnergyUsage(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetEnergyUsageResponse, error)
	GetEvConnectState(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetEvConnectStateResponse, error)
	GetFaultCounters(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetFaultCountersResponse, error)
	GetOverTemperatureThresholds(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetOverTemperatureThresholdsResponse, error)
	GetRtcTime(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetRtcTimeResponse, error)
	GetSettings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	GetTimeLimit(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTimeLimitResponse, error)
	GetVersion(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetVoltmeterSettings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetVoltmeterSettingsResponse, error)
	SetRtcTime(ctx context.Context, in *SetRtcTimeRequest, opts ...grpc.CallOption) (*SetResponse, error)
}

type openevseClient struct {
	cc *grpc.ClientConn
}

func NewOpenevseClient(cc *grpc.ClientConn) OpenevseClient {
	return &openevseClient{cc}
}

func (c *openevseClient) FindChargerById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Charger, error) {
	out := new(Charger)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/FindChargerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) FindAllChargers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FindAllChargersResponse, error) {
	out := new(FindAllChargersResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/FindAllChargers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetAmmeterSettings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAmmeterSettingsResponse, error) {
	out := new(GetAmmeterSettingsResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetAmmeterSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetAuthLockState(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAuthLockStateResponse, error) {
	out := new(GetAuthLockStateResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetAuthLockState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetChargeLimit(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetChargeLimitResponse, error) {
	out := new(GetChargeLimitResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetChargeLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetCurrentCapacityRangeInAmps(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCurrentCapacityRangeInAmpsResponse, error) {
	out := new(GetCurrentCapacityRangeInAmpsResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetCurrentCapacityRangeInAmps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetDelayTimer(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetDelayTimerResponse, error) {
	out := new(GetDelayTimerResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetDelayTimer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetEnergyUsage(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetEnergyUsageResponse, error) {
	out := new(GetEnergyUsageResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetEnergyUsage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetEvConnectState(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetEvConnectStateResponse, error) {
	out := new(GetEvConnectStateResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetEvConnectState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetFaultCounters(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetFaultCountersResponse, error) {
	out := new(GetFaultCountersResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetFaultCounters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetOverTemperatureThresholds(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetOverTemperatureThresholdsResponse, error) {
	out := new(GetOverTemperatureThresholdsResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetOverTemperatureThresholds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetRtcTime(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetRtcTimeResponse, error) {
	out := new(GetRtcTimeResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetRtcTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetSettings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetTimeLimit(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTimeLimitResponse, error) {
	out := new(GetTimeLimitResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetTimeLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetVersion(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) GetVoltmeterSettings(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetVoltmeterSettingsResponse, error) {
	out := new(GetVoltmeterSettingsResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/GetVoltmeterSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openevseClient) SetRtcTime(ctx context.Context, in *SetRtcTimeRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/iot_openevse_service.Openevse/SetRtcTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Openevse service

type OpenevseServer interface {
	FindChargerById(context.Context, *GetRequest) (*Charger, error)
	FindAllChargers(context.Context, *google_protobuf.Empty) (*FindAllChargersResponse, error)
	GetAmmeterSettings(context.Context, *GetRequest) (*GetAmmeterSettingsResponse, error)
	GetAuthLockState(context.Context, *GetRequest) (*GetAuthLockStateResponse, error)
	GetChargeLimit(context.Context, *GetRequest) (*GetChargeLimitResponse, error)
	GetCurrentCapacityRangeInAmps(context.Context, *GetRequest) (*GetCurrentCapacityRangeInAmpsResponse, error)
	GetDelayTimer(context.Context, *GetRequest) (*GetDelayTimerResponse, error)
	GetEnergyUsage(context.Context, *GetRequest) (*GetEnergyUsageResponse, error)
	GetEvConnectState(context.Context, *GetRequest) (*GetEvConnectStateResponse, error)
	GetFaultCounters(context.Context, *GetRequest) (*GetFaultCountersResponse, error)
	GetOverTemperatureThresholds(context.Context, *GetRequest) (*GetOverTemperatureThresholdsResponse, error)
	GetRtcTime(context.Context, *GetRequest) (*GetRtcTimeResponse, error)
	GetSettings(context.Context, *GetRequest) (*GetSettingsResponse, error)
	GetTimeLimit(context.Context, *GetRequest) (*GetTimeLimitResponse, error)
	GetVersion(context.Context, *GetRequest) (*GetVersionResponse, error)
	GetVoltmeterSettings(context.Context, *GetRequest) (*GetVoltmeterSettingsResponse, error)
	SetRtcTime(context.Context, *SetRtcTimeRequest) (*SetResponse, error)
}

func RegisterOpenevseServer(s *grpc.Server, srv OpenevseServer) {
	s.RegisterService(&_Openevse_serviceDesc, srv)
}

func _Openevse_FindChargerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).FindChargerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/FindChargerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).FindChargerById(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_FindAllChargers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).FindAllChargers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/FindAllChargers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).FindAllChargers(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetAmmeterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetAmmeterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetAmmeterSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetAmmeterSettings(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetAuthLockState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetAuthLockState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetAuthLockState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetAuthLockState(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetChargeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetChargeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetChargeLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetChargeLimit(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetCurrentCapacityRangeInAmps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetCurrentCapacityRangeInAmps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetCurrentCapacityRangeInAmps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetCurrentCapacityRangeInAmps(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetDelayTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetDelayTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetDelayTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetDelayTimer(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetEnergyUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetEnergyUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetEnergyUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetEnergyUsage(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetEvConnectState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetEvConnectState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetEvConnectState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetEvConnectState(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetFaultCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetFaultCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetFaultCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetFaultCounters(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetOverTemperatureThresholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetOverTemperatureThresholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetOverTemperatureThresholds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetOverTemperatureThresholds(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetRtcTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetRtcTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetRtcTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetRtcTime(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetSettings(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetTimeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetTimeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetTimeLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetTimeLimit(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetVersion(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_GetVoltmeterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).GetVoltmeterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/GetVoltmeterSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).GetVoltmeterSettings(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openevse_SetRtcTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRtcTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenevseServer).SetRtcTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_openevse_service.Openevse/SetRtcTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenevseServer).SetRtcTime(ctx, req.(*SetRtcTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Openevse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iot_openevse_service.Openevse",
	HandlerType: (*OpenevseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindChargerById",
			Handler:    _Openevse_FindChargerById_Handler,
		},
		{
			MethodName: "FindAllChargers",
			Handler:    _Openevse_FindAllChargers_Handler,
		},
		{
			MethodName: "GetAmmeterSettings",
			Handler:    _Openevse_GetAmmeterSettings_Handler,
		},
		{
			MethodName: "GetAuthLockState",
			Handler:    _Openevse_GetAuthLockState_Handler,
		},
		{
			MethodName: "GetChargeLimit",
			Handler:    _Openevse_GetChargeLimit_Handler,
		},
		{
			MethodName: "GetCurrentCapacityRangeInAmps",
			Handler:    _Openevse_GetCurrentCapacityRangeInAmps_Handler,
		},
		{
			MethodName: "GetDelayTimer",
			Handler:    _Openevse_GetDelayTimer_Handler,
		},
		{
			MethodName: "GetEnergyUsage",
			Handler:    _Openevse_GetEnergyUsage_Handler,
		},
		{
			MethodName: "GetEvConnectState",
			Handler:    _Openevse_GetEvConnectState_Handler,
		},
		{
			MethodName: "GetFaultCounters",
			Handler:    _Openevse_GetFaultCounters_Handler,
		},
		{
			MethodName: "GetOverTemperatureThresholds",
			Handler:    _Openevse_GetOverTemperatureThresholds_Handler,
		},
		{
			MethodName: "GetRtcTime",
			Handler:    _Openevse_GetRtcTime_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Openevse_GetSettings_Handler,
		},
		{
			MethodName: "GetTimeLimit",
			Handler:    _Openevse_GetTimeLimit_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Openevse_GetVersion_Handler,
		},
		{
			MethodName: "GetVoltmeterSettings",
			Handler:    _Openevse_GetVoltmeterSettings_Handler,
		},
		{
			MethodName: "SetRtcTime",
			Handler:    _Openevse_SetRtcTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot-openevse-service.proto",
}

func init() { proto.RegisterFile("iot-openevse-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x6d, 0x6f, 0xdb, 0x54,
	0x14, 0x26, 0xee, 0xfb, 0x29, 0xcd, 0x5a, 0x53, 0xba, 0x10, 0xda, 0xa9, 0x58, 0x03, 0xca, 0x58,
	0x5d, 0xd4, 0x7d, 0x02, 0x04, 0xa8, 0xcd, 0xda, 0x28, 0x62, 0x4a, 0x2a, 0x27, 0x1b, 0x15, 0x20,
	0x8a, 0x6b, 0x9f, 0x24, 0x26, 0xb6, 0x6f, 0xb8, 0xbe, 0x6e, 0xa9, 0x84, 0xf8, 0x23, 0x7c, 0xe3,
	0x07, 0xf0, 0x81, 0x5f, 0x88, 0xee, 0x8b, 0x1d, 0x27, 0xb1, 0x37, 0x4f, 0xfd, 0xe6, 0xf3, 0x9c,
	0x97, 0xe7, 0xbe, 0x9c, 0x7b, 0x1e, 0x43, 0xdd, 0x23, 0xec, 0x90, 0x8c, 0x31, 0xc4, 0x9b, 0x08,
	0x0f, 0x23, 0xa4, 0x37, 0x9e, 0x83, 0xe6, 0x98, 0x12, 0x46, 0xf4, 0x6d, 0x8f, 0xb0, 0xab, 0xc4,
	0x77, 0xa5, 0x7c, 0xf5, 0x0f, 0x07, 0x84, 0x0c, 0x7c, 0x3c, 0x12, 0x31, 0xd7, 0x71, 0xff, 0x08,
	0x83, 0x31, 0xbb, 0x93, 0x29, 0xc6, 0x2e, 0x40, 0x13, 0x99, 0x85, 0xbf, 0xc7, 0x18, 0x31, 0xbd,
	0x0a, 0x9a, 0xe7, 0xd6, 0x2a, 0xfb, 0x95, 0x83, 0x45, 0x4b, 0xf3, 0x5c, 0x83, 0x42, 0xbd, 0x89,
	0xec, 0x24, 0x08, 0x90, 0x21, 0xed, 0x22, 0x63, 0x5e, 0x38, 0x88, 0x2c, 0x8c, 0xc6, 0x24, 0x8c,
	0x50, 0x37, 0x41, 0x77, 0x62, 0x4a, 0x31, 0x64, 0x5d, 0xc7, 0xf6, 0xf1, 0xdc, 0x76, 0x18, 0xa1,
	0x22, 0x7b, 0xc9, 0xca, 0xf1, 0xe8, 0x8f, 0x61, 0x43, 0xa1, 0x9d, 0x7e, 0x3f, 0x42, 0x56, 0xd3,
	0x44, 0xe8, 0x34, 0x68, 0x1c, 0x43, 0x8d, 0x73, 0xc6, 0x6c, 0xf8, 0x82, 0x38, 0xa3, 0x2e, 0xb3,
	0x19, 0xa6, 0x8c, 0x3b, 0xb0, 0xec, 0x13, 0x67, 0x84, 0x72, 0x8d, 0xab, 0x96, 0xb2, 0x8c, 0x27,
	0xb0, 0xd3, 0x44, 0xd6, 0x18, 0xda, 0x74, 0x80, 0x2f, 0xbc, 0xc0, 0x63, 0x69, 0xc6, 0x26, 0x2c,
	0x8c, 0x6e, 0x87, 0x6a, 0x51, 0xfc, 0xd3, 0xf8, 0x09, 0x3e, 0xe6, 0xb1, 0x92, 0xb3, 0x61, 0x8f,
	0x6d, 0xc7, 0x63, 0x77, 0x96, 0x1d, 0x0e, 0xb0, 0x15, 0x9e, 0x04, 0xe3, 0xc9, 0xf6, 0x6a, 0xb0,
	0x12, 0x78, 0x02, 0x52, 0xe9, 0x89, 0x29, 0x3c, 0xf6, 0x1f, 0xc2, 0xa3, 0x29, 0x8f, 0x34, 0x8d,
	0x0e, 0xbc, 0xdf, 0x44, 0xf6, 0x1c, 0x7d, 0xfb, 0xae, 0xe7, 0x05, 0x48, 0xd3, 0x62, 0xbb, 0xb0,
	0x16, 0x31, 0x9b, 0x32, 0x8e, 0x8a, 0x72, 0x6b, 0xd6, 0x04, 0xe0, 0x05, 0x31, 0x74, 0x85, 0x4f,
	0x13, 0xbe, 0xc4, 0x34, 0xae, 0xc5, 0xce, 0xce, 0x42, 0xa4, 0x83, 0xbb, 0x97, 0x91, 0x3d, 0x98,
	0x9c, 0xc5, 0x3e, 0xac, 0xdf, 0x0e, 0x5b, 0x61, 0x17, 0xa3, 0xc8, 0x23, 0xa1, 0xa8, 0xa9, 0x59,
	0x59, 0x48, 0xff, 0x04, 0xaa, 0xa3, 0xdb, 0xe1, 0x89, 0xe3, 0xc4, 0x41, 0xec, 0xdb, 0x0c, 0x5d,
	0x51, 0x5c, 0xb3, 0x66, 0x50, 0xe3, 0xbf, 0x0a, 0x7c, 0xc0, 0x49, 0x6e, 0x1a, 0x24, 0x0c, 0xd1,
	0x61, 0xd3, 0x67, 0xde, 0x83, 0xa5, 0x88, 0x03, 0x82, 0xa1, 0x7a, 0xfc, 0xad, 0x99, 0xd7, 0x64,
	0x66, 0x61, 0xbe, 0x39, 0x03, 0xcb, 0x62, 0xc6, 0x77, 0x50, 0x9d, 0x76, 0xe8, 0x5b, 0xb0, 0xd1,
	0xee, 0xf4, 0xae, 0x1a, 0x9d, 0x76, 0xfb, 0xac, 0xd1, 0x3b, 0x7b, 0xbe, 0xf9, 0x8e, 0xbe, 0x01,
	0x6b, 0x13, 0xb3, 0xa2, 0xaf, 0xc3, 0xca, 0xcb, 0xf6, 0xf7, 0xed, 0xce, 0x0f, 0xed, 0x4d, 0xcd,
	0xf8, 0x4d, 0xb4, 0xc9, 0xb9, 0x1d, 0xfb, 0xac, 0x41, 0xe2, 0x90, 0x21, 0x9d, 0xdc, 0x9c, 0x0e,
	0x8b, 0x83, 0xbe, 0xeb, 0xa9, 0x6b, 0x13, 0xdf, 0x7a, 0x1d, 0x56, 0x43, 0xd2, 0xa4, 0x24, 0x0e,
	0x5d, 0x75, 0x69, 0xa9, 0xad, 0x3f, 0x02, 0x88, 0x58, 0xec, 0x8c, 0x2c, 0x7e, 0x6f, 0xb5, 0x05,
	0xe1, 0xcd, 0x20, 0xc6, 0x05, 0x3c, 0x6e, 0x22, 0xeb, 0xdc, 0x20, 0xed, 0x61, 0x30, 0x46, 0x6a,
	0xb3, 0x98, 0x62, 0x6f, 0x48, 0x31, 0x1a, 0x12, 0xdf, 0x9d, 0xea, 0x18, 0x3b, 0xb8, 0xf6, 0x30,
	0x64, 0xea, 0x3a, 0x12, 0x53, 0x3c, 0x2c, 0xaa, 0x8e, 0x5f, 0xf3, 0xa8, 0x61, 0x82, 0xce, 0x9f,
	0x1d, 0x73, 0xf8, 0x25, 0x67, 0xf3, 0xa9, 0x84, 0x54, 0x8b, 0x24, 0xa6, 0x71, 0x06, 0xef, 0x35,
	0x91, 0xcd, 0xbd, 0x40, 0x41, 0x38, 0x46, 0x8a, 0x69, 0x8b, 0x2a, 0x53, 0xdf, 0x86, 0xa5, 0xbe,
	0x6f, 0x0f, 0x78, 0x83, 0x2e, 0x1c, 0xac, 0x59, 0xd2, 0x30, 0x9e, 0xc2, 0x76, 0x13, 0x45, 0xcb,
	0x4d, 0xbf, 0x92, 0x6d, 0x58, 0xf2, 0x39, 0xa0, 0xaa, 0x48, 0xc3, 0x18, 0x8a, 0x45, 0xbe, 0x42,
	0xca, 0xbb, 0x29, 0x8d, 0x3d, 0x80, 0x07, 0x7d, 0x8f, 0x06, 0xb7, 0x36, 0x45, 0xe5, 0x52, 0x8b,
	0x9d, 0x85, 0x79, 0xa4, 0x18, 0x32, 0x0e, 0xf1, 0x93, 0x48, 0xd9, 0xdd, 0xb3, 0xb0, 0xf1, 0x0a,
	0x76, 0x39, 0x13, 0xf1, 0x59, 0xfe, 0xa4, 0x79, 0x04, 0xc0, 0xe7, 0x48, 0x3f, 0x3b, 0x61, 0x32,
	0x08, 0x9f, 0x0b, 0x24, 0x3b, 0x52, 0x94, 0x65, 0xec, 0xc1, 0x7a, 0x17, 0x27, 0xdb, 0xac, 0x82,
	0x46, 0x46, 0x6a, 0x74, 0x68, 0x64, 0x64, 0x7c, 0x03, 0x5b, 0xdd, 0xcc, 0x2d, 0xe4, 0xce, 0xc0,
	0xec, 0xa5, 0x68, 0xd3, 0x97, 0xf2, 0x77, 0x05, 0x56, 0xe4, 0xcc, 0xa1, 0x3c, 0xab, 0x95, 0x66,
	0xb5, 0x5c, 0xde, 0x82, 0xa1, 0x9d, 0xa6, 0x88, 0x6f, 0x8e, 0x0d, 0x49, 0xc4, 0x44, 0x83, 0xad,
	0x59, 0xe2, 0x9b, 0xcf, 0x05, 0x87, 0x22, 0x7f, 0x86, 0x27, 0xac, 0xb6, 0x28, 0xe7, 0x42, 0x0a,
	0x70, 0x6f, 0x3c, 0x76, 0x95, 0x77, 0x49, 0x7a, 0x53, 0x80, 0x7b, 0x5d, 0xf4, 0x51, 0x7a, 0x97,
	0xa5, 0x37, 0x05, 0x8c, 0x1e, 0x3c, 0x3c, 0xf7, 0x42, 0xf7, 0xc4, 0xf7, 0xd5, 0x1a, 0x27, 0xc7,
	0xf9, 0x25, 0xac, 0x3a, 0x0a, 0xab, 0x55, 0xf6, 0x17, 0x0e, 0xd6, 0x8f, 0xf7, 0xf2, 0x5f, 0xb5,
	0xca, 0xb4, 0xd2, 0xf0, 0xe3, 0x7f, 0x37, 0x60, 0xb5, 0xa3, 0xc2, 0x74, 0x0b, 0x1e, 0x70, 0x0a,
	0x15, 0x75, 0x7a, 0xd7, 0x72, 0xf5, 0xfd, 0xc2, 0xf1, 0xa0, 0xce, 0xb7, 0xfe, 0x7a, 0x2a, 0xfd,
	0x52, 0xd6, 0xcc, 0x2c, 0x5b, 0xdf, 0x31, 0xa5, 0x82, 0x99, 0x89, 0x82, 0x99, 0x67, 0x5c, 0xc1,
	0xea, 0x87, 0xf9, 0x95, 0x8a, 0x76, 0x2d, 0xdb, 0x79, 0x46, 0xcc, 0x4a, 0x2c, 0xf8, 0x8b, 0xc2,
	0x88, 0x22, 0x61, 0x74, 0x61, 0x73, 0x56, 0xc2, 0x4a, 0xf0, 0x98, 0xc5, 0x3c, 0xb9, 0x62, 0xf8,
	0x2b, 0x54, 0xa7, 0x45, 0xaf, 0x04, 0xc7, 0xd3, 0xc2, 0x88, 0x3c, 0xf1, 0xfc, 0x0b, 0xf6, 0x5e,
	0x2b, 0x95, 0x25, 0x08, 0xbf, 0x2e, 0x26, 0x7c, 0xb3, 0x02, 0xff, 0x02, 0x1b, 0x53, 0x6a, 0x5a,
	0x82, 0xef, 0xf3, 0xc2, 0x88, 0x1c, 0x51, 0x96, 0x27, 0x98, 0x11, 0xd7, 0x7b, 0x9d, 0x60, 0x9e,
	0x48, 0xf7, 0x61, 0x6b, 0x4e, 0x19, 0x4b, 0x90, 0x1c, 0xbd, 0xa5, 0xc8, 0xaa, 0x8e, 0x9b, 0x52,
	0xc3, 0x7b, 0x75, 0x5c, 0xbe, 0xae, 0xfe, 0x29, 0xc6, 0x74, 0xa1, 0x0e, 0x96, 0x60, 0xfc, 0xaa,
	0x30, 0xe2, 0xcd, 0xea, 0x7a, 0x29, 0x7f, 0x55, 0xe5, 0xf0, 0x2d, 0xc1, 0x75, 0x50, 0x1c, 0x31,
	0xa3, 0xbb, 0x3f, 0xc2, 0x7a, 0x46, 0x5d, 0x4b, 0x94, 0xfe, 0xac, 0x30, 0x62, 0x6e, 0x16, 0xfc,
	0x0c, 0xef, 0x66, 0x25, 0xb7, 0x44, 0xf1, 0x27, 0x85, 0x11, 0xf3, 0xc2, 0x2d, 0xcf, 0x24, 0x11,
	0xdc, 0xfb, 0x9c, 0xc9, 0xac, 0xcc, 0xfb, 0xe2, 0x57, 0x61, 0x4e, 0x92, 0x4b, 0x70, 0x1c, 0x17,
	0x73, 0x14, 0x0a, 0xfc, 0x25, 0xc0, 0x44, 0x89, 0xf5, 0x4f, 0xf3, 0x2b, 0xcc, 0x69, 0x75, 0xfd,
	0xa3, 0xe2, 0x40, 0x55, 0xf9, 0xf4, 0x19, 0x3c, 0x74, 0x48, 0x60, 0xda, 0x37, 0x38, 0xb0, 0x09,
	0x0f, 0x37, 0x93, 0xf0, 0xd3, 0xcd, 0x16, 0x61, 0x89, 0x96, 0x5d, 0x70, 0x69, 0xb9, 0xa8, 0xfc,
	0xa3, 0x2d, 0x58, 0xbd, 0xe6, 0xf5, 0xb2, 0x50, 0x9a, 0x67, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xec, 0x6d, 0xab, 0x01, 0x6d, 0x0d, 0x00, 0x00,
}
